@page
@model ResultsModel
@{
    ViewData["Title"] = string.IsNullOrEmpty((string)ViewData["Title"]) ? "Distressed Property Results" : ViewData["Title"];
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f5f5f5; /* Soft background color */
            color: #333; /* Dark gray text for readability */
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 10px auto; /* Reduced top margin */
            padding: 15px;
            min-height: 80vh; /* Ensures the container takes at least 80% of the height */
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .header {
            background-color: #3498db; /* Soft blue header */
            color: white;
            padding: 20px 30px;
            text-align: center;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        h1 {
            font-size: 36px;
            margin: 0;
        }

        .table {
            margin-top: 30px;
            border-collapse: collapse;
            width: 100%;
            background-color: white; /* Clean white background for table */
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }

            .table th, .table td {
                padding: 15px;
                text-align: left;
                border-bottom: 1px solid #e1e1e2; /* Light border for separation */
            }

            .table th {
                background-color: #3498db; /* Soft blue header for table */
                color: white;
                font-weight: 500;
            }

            .table img {
                border-radius: 8px;
                width: 120px;
                height: auto;
                transition: transform 0.3s ease-in-out;
            }

                .table img:hover {
                    transform: scale(1.05); /* Slight zoom effect for images */
                }

            .table tbody tr {
                cursor: pointer;
                transition: background-color 0.3s;
            }

                .table tbody tr:hover {
                    background-color: #f0f8ff; /* Light blue hover effect */
                }

        .no-results {
            font-size: 18px;
            text-align: center;
            color: #e74c3c; /* Red color for error messages */
            padding: 50px;
        }

        .btn-back {
            background-color: #3498db; /* Soft blue button */
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 500;
            transition: background-color 0.3s ease-in-out;
        }

            .btn-back:hover {
                background-color: #2980b9; /* Slightly darker blue on hover */
            }

        #exportButton {
            background-color: #2ecc71; /* Green button for Export */
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 500;
            transition: background-color 0.3s ease-in-out;
            margin-top: 20px;
            align-self: center;
        }

            #exportButton:hover {
                background-color: #27ae60; /* Slightly darker green on hover */
            }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>

    <script>
        function exportToExcel() {
            const properties = @Html.Raw(Json.Serialize(Model.DistressedProperties));

            // Create an array to store the table data for export
            let data = [];
            data.push(["#", "Address", "Distress Notes", "Image URL"]);  // Header row

            // Fill data rows with property details
            properties.forEach((property, index) => {
                let notes = property.distressNotes.join(";");
                data.push([index + 1, property.address, notes, property.imageUrl]);
            });

            // Convert the data array to a worksheet
            const ws = XLSX.utils.aoa_to_sheet(data);

            // Create a new workbook and append the worksheet
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Distressed Properties");

            // Trigger the download
            XLSX.writeFile(wb, "distressed_properties.xlsx");
        }
    </script>

</head>
<body>
    <div class="container">
        <div class="header">
            <h1>@ViewData["Title"]</h1>
        </div>

        @if (Model.IsAnalysisComplete && Model.DistressedProperties.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Address</th>
                        <th>Distress Notes</th>
                        <th>Image</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.DistressedProperties.Count; i++)
                    {
                        var notes = string.Join(";", Model.DistressedProperties[i].DistressNotes); // Serialize notes
                        <tr onclick="window.location='@Url.Page("/Details", new { address = Model.DistressedProperties[i].Address, distressNotes = notes, imageUrl = Model.DistressedProperties[i].ImageUrl })'">
                            <td>@(i + 1)</td>
                            <td>@Model.DistressedProperties[i].Address</td>
                            <td>
                                <ul>
                                    @foreach (var note in Model.DistressedProperties[i].DistressNotes)
                                    {
                                        <li>@note</li>
                                    }
                                </ul>
                            </td>
                            <td>
                                <img src="@Model.DistressedProperties[i].ImageUrl" alt="Street View of @Model.DistressedProperties[i].Address" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <button id="exportButton" class="btn btn-success mb-3" onclick="exportToExcel()">Export to Excel</button>
        }
        else
        {
            <p class="no-results">No distressed properties found. Please try again later.</p>
        }

        <div class="text-center mt-4">
            <a href="/" class="btn-back" aria-label="Back to Dashboard">Back to Dashboard</a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
